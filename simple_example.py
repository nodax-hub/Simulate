"""
# Формируем список ключевых точек на маршруте через которые дрон должен пролететь
# 1. Согласно заданным параметрам аппарата (максимальная скорость, ускорение/торможение, прохождение поворотов)
# и с учётом набора точек через которые дрон должен пролететь
# выполняем расчёт горизонтальной скорости дрона в точках на маршруте

# 2. Зная траекторию и предсказанную скорость движения аппарата по ней (v_motion(t))
# и учитывая заданные параметры и ограничения:

# минимальная/максимальная скорость работы насоса (и настройка поведения при нарушении границ - например отключение или работа на границах возможного),
# объём бака V_tank
# общая длина L
# сколько всего литров должны вылить V_total

# Перед полётом (или в ходе полёта) выполняем вычисления (грубо говоря - переводим в задачу движение по прямой с переменной скоростью и необходимостью вылить заданный объём жидкостью с учётом ограничений):
# 1) проверяем не выходим ли мы в ходе полёта за ограничения насоса (считаем скорость насоса по формуле v_pump(t) = V_total * v_motion(t) / L)
# 2) (если есть, объём бака не позволит нам за раз вылить требуемый суммарный объём) определяем точки опустошения бака (согласно вычисленным v_pump(t))
"""

from SpeedPredictor import MotionConstraints, SpeedPredictor
from dto import Point


def main():
    waypoints = [Point(0, 0),
                 Point(50, 0),
                 Point(50, 50),
                 Point(100, 50)]

    motion = MotionConstraints(
        v_max=20.0,
        a_max=4.0,
        d_max=5.0,
        yaw_rate=90.0,
        turn_radius=5.0,  # дуговой поворот (None => на месте)
        a_lat_max=2.0,
        angle_eps_deg=3.0,
        start_speed=0.0,
        end_speed=0.0
    )

    predictor = SpeedPredictor(motion)
    profile = predictor.build_profile(waypoints)

    # доступ к данным
    segs = profile.all_segments
    s = profile.total_distance
    v_mid = profile.speed_at_distance(s * 0.5)

    print(segs, s, v_mid)


if __name__ == '__main__':
    main()
